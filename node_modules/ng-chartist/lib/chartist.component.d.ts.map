{"version":3,"file":"chartist.component.d.ts","sources":["chartist.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport * as Chartist from 'chartist';\r\n/**\r\n * Possible chart types\r\n */\r\nexport declare type ChartType = 'Pie' | 'Bar' | 'Line';\r\nexport declare type ChartInterfaces = Chartist.IChartistPieChart | Chartist.IChartistBarChart | Chartist.IChartistLineChart;\r\nexport declare type ChartOptions = Chartist.IBarChartOptions | Chartist.ILineChartOptions | Chartist.IPieChartOptions;\r\nexport declare type ResponsiveOptionTuple = Chartist.IResponsiveOptionTuple<ChartOptions>;\r\nexport declare type ResponsiveOptions = ResponsiveOptionTuple[];\r\n/**\r\n * Represents chart events.\r\n */\r\nexport interface ChartEvent {\r\n    [eventName: string]: (data: any) => void;\r\n}\r\n/**\r\n * Angular component which renders Chartist chart.\r\n *\r\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\r\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\r\n * ### Example\r\n ```html\r\n <x-chartist\r\n   [type]=\"type\"\r\n   [data]=\"data\"\r\n   [options]=\"options\"\r\n   [responsiveOptions]=\"responsiveOptions\"\r\n   [events]=\"events\"\r\n ></x-chartist>\r\n ```\r\n */\r\nexport declare class ChartistComponent implements OnInit, OnChanges, OnDestroy {\r\n    private elementRef;\r\n    /**\r\n     * The data object that needs to consist of a labels and a series array.\r\n     */\r\n    data: Chartist.IChartistData;\r\n    /**\r\n     * Chartist chart type.\r\n     */\r\n    type: ChartType;\r\n    /**\r\n     * The options object which overrides the default options.\r\n     */\r\n    options: Chartist.IChartOptions;\r\n    /**\r\n     * An array of responsive option arrays which are a media query and options object pair: [[mediaQueryString, optionsObject],[more...]]\r\n     */\r\n    responsiveOptions: ResponsiveOptions;\r\n    /**\r\n     * Events object where keys are Chartist event names and values are event handler functions.\r\n     *\r\n     * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.\r\n     *\r\n     * Event handler function will receive a data argument which contains event data.\r\n     */\r\n    events: ChartEvent;\r\n    /**\r\n     * Event emitted after Chartist chart has been initialized.\r\n     *\r\n     * Event handler function will receive chart instance argument.\r\n     */\r\n    initialized: EventEmitter<ChartInterfaces>;\r\n    /** @ignore */\r\n    private chart;\r\n    /** @ignore */\r\n    constructor(elementRef: ElementRef);\r\n    /** @ignore */\r\n    ngOnInit(): void;\r\n    /** @ignore */\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /** @ignore */\r\n    ngOnDestroy(): void;\r\n    /** @ignore */\r\n    private renderChart;\r\n    /** @ignore */\r\n    private update;\r\n    /** @ignore */\r\n    private bindEvents;\r\n}\r\n"]}