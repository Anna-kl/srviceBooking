{"version":3,"file":"ng-chartist.js","sources":["ng-chartist/lib/chartist.component.ts","ng-chartist/lib/chartist.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\n\nimport * as Chartist from 'chartist';\nimport { IChartistBase, IChartOptions } from 'chartist';\n\n/**\n * Possible chart types\n */\nexport type ChartType = 'Pie' | 'Bar' | 'Line';\n\nexport type ChartInterfaces =\n  | Chartist.IChartistPieChart\n  | Chartist.IChartistBarChart\n  | Chartist.IChartistLineChart;\nexport type ChartOptions =\n  | Chartist.IBarChartOptions\n  | Chartist.ILineChartOptions\n  | Chartist.IPieChartOptions;\nexport type ResponsiveOptionTuple = Chartist.IResponsiveOptionTuple<\n  ChartOptions\n>;\nexport type ResponsiveOptions = ResponsiveOptionTuple[];\n\n/**\n * Represents chart events.\n */\nexport interface ChartEvent {\n  [eventName: string]: (data: any) => void;\n}\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [type]=\"type\"\n   [data]=\"data\"\n   [options]=\"options\"\n   [responsiveOptions]=\"responsiveOptions\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\n@Component({\n  selector: 'x-chartist',\n  template: '',\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `\n  ]\n})\nexport class ChartistComponent implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The data object that needs to consist of a labels and a series array.\n   */\n  @Input()\n  data: Chartist.IChartistData;\n\n  /**\n   * Chartist chart type.\n   */\n  @Input()\n  type: ChartType;\n\n  /**\n   * The options object which overrides the default options.\n   */\n  @Input()\n  options: Chartist.IChartOptions;\n\n  /**\n   * An array of responsive option arrays which are a media query and options object pair: [[mediaQueryString, optionsObject],[more...]]\n   */\n  @Input()\n  responsiveOptions: ResponsiveOptions;\n\n  /**\n   * Events object where keys are Chartist event names and values are event handler functions.\n   *\n   * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.\n   *\n   * Event handler function will receive a data argument which contains event data.\n   */\n  @Input()\n  events: ChartEvent;\n\n  /**\n   * Event emitted after Chartist chart has been initialized.\n   *\n   * Event handler function will receive chart instance argument.\n   */\n  @Output()\n  initialized = new EventEmitter<ChartInterfaces>();\n\n  /** @ignore */\n  private chart: ChartInterfaces;\n\n  /** @ignore */\n  constructor(private elementRef: ElementRef) {}\n\n  /** @ignore */\n  ngOnInit(): void {\n    if (this.type && this.data) {\n      this.renderChart();\n    }\n  }\n\n  /** @ignore */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update(changes);\n  }\n\n  /** @ignore */\n  ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.detach();\n      this.chart = null;\n    }\n  }\n\n  /** @ignore */\n  private renderChart() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    if (!(this.type in Chartist)) {\n      throw new Error(`${this.type} is not a valid chart type`);\n    }\n\n    this.chart = (<any>Chartist)[this.type](\n      nativeElement,\n      this.data,\n      this.options,\n      this.responsiveOptions\n    );\n\n    if (this.events) {\n      this.bindEvents();\n    }\n\n    this.initialized.emit(this.chart);\n  }\n\n  /** @ignore */\n  private update(changes: SimpleChanges): void {\n    if (!this.type || !this.data) {\n      return;\n    }\n\n    if (!this.chart || 'type' in changes) {\n      this.renderChart();\n    } else if (changes.data || changes.options) {\n      (<IChartistBase<IChartOptions>>this.chart).update(\n        this.data,\n        this.options\n      );\n    }\n  }\n\n  /** @ignore */\n  private bindEvents(): void {\n    for (const event of Object.keys(this.events)) {\n      this.chart.on(event, this.events[event]);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartistComponent } from './chartist.component';\n\n@NgModule({\n  declarations: [ChartistComponent],\n  imports: [],\n  exports: [ChartistComponent]\n})\nexport class ChartistModule {}\n"]}